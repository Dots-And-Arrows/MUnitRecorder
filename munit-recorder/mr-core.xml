<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns:compression="http://www.mulesoft.org/schema/mule/compression"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:file="http://www.mulesoft.org/schema/mule/file"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
						http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
						http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
						http://www.mulesoft.org/schema/mule/compression http://www.mulesoft.org/schema/mule/compression/current/mule-compression.xsd
						http://www.mulesoft.org/schema/mule/munit-tools http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
						http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd">
	<file:config doc:id="a9fda417-c22b-4d2a-b7a9-ea51d0bb9bc9" doc:name="File Config"
		name="test_data">
		<file:connection workingDir="src/test/resources/test_data/" />
	</file:config>
	<file:config doc:id="56c6618c-3c1a-4810-9e95-77a2cc691ea2" doc:name="File Config" name="test">
		<file:connection workingDir='#["src/test/resources/test_data/" ++ vars.testName]' />
	</file:config>
	<sub-flow name="mr-mock-component" doc:id="56c6618c-3c1a-4810-9e95-77a2cc691ea2">
		<flow-ref doc:name="sanitize filename so it does not crash on windows"
			doc:id="38b51f22-5fcf-4a4b-a3a0-9e307a61b5b8" name="mr-core-sanitize-filename" />
		<flow-ref doc:name="sanitize requestParams" doc:id="e48c52b6-ad40-4cd2-8183-ab847e22e2d7"
			name="mr-core-load-input" target="requestParams" />
		<set-payload
			value='#[output java --- readUrl("classpath://test_data/" ++ vars.testName ++ "/" ++ vars.testDataFileName ++ ".json", "application/json")]'
			doc:name="read payload from file" doc:id="48287070-948e-4b83-b99e-b12ea9014f30" />
		<ee:transform doc:name="set mockResponse var" doc:id="121202ab-9850-4457-8ec1-e29370e029ee">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="mockResponse"><![CDATA[import firstWith from dw::core::Arrays
output java
---
(payload firstWith ($.requestParams ~= vars.requestParams)).response]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<validation:is-not-null doc:name="Is not null" doc:id="dda92feb-c88e-4a07-86fb-d68adfcdbc10"
			message="#[&quot;No matching result found for these params in the test data! It's either not implemented or there is a dynamic variable like a date.\nrequestParams:\n&quot; ++ write(vars.requestParams,'application/json')]"
			value="#[vars.mockResponse]" />
		<choice doc:name="Choice" doc:id="94dfe396-bb9a-4b0a-80c0-cbffee375b8a">
			<when expression='#[// gzip&#10;vars.mockResponse.compression == "gzip"]'>
				<compression:compress doc:name="compress gzip"
					doc:id="21f9a918-0716-45e6-81e9-26ecaf83dde1">
					<compression:content><![CDATA[#[vars.mockResponse.payload]]]></compression:content>
					<compression:compressor>
						<compression:gzip-compressor />
					</compression:compressor>
				</compression:compress>
			</when>
			<when expression='#[// zip&#10;vars.mockResponse.compression == "zip"]'>
				<compression:compress doc:name="compress zip"
					doc:id="baffc372-8b26-457b-969b-33a7368f877e">
					<compression:content><![CDATA[#[vars.mockResponse.payload]]]></compression:content>
					<compression:compressor>
						<compression:zip-compressor />
					</compression:compressor>
				</compression:compress>
			</when>
			<otherwise>
				<set-payload value="#[vars.mockResponse.payload]" doc:name="Set Payload"
					doc:id="0575a07c-c238-4637-8099-06885e7c0fe1" />
			</otherwise>
		</choice>
		<ee:transform doc:name="set attributes" doc:id="54098e77-5771-44e6-b4d7-0d7e697ea181">
			<ee:message>
				<ee:set-attributes><![CDATA[output java
---
vars.mockResponse.attributes]]></ee:set-attributes>
			</ee:message>
		</ee:transform>
		<remove-variable doc:name="Remove mockResponse var"
			doc:id="d976d4cb-9c72-4329-99a4-461b29f98b49" variableName="mockResponse" />
		<remove-variable doc:name="Remove requestParams"
			doc:id="d874e72e-e1b4-4758-8418-a4141169827e" variableName="requestParams" />
	</sub-flow>
	<sub-flow name="mr-core-load-input" doc:id="f87198c2-1c9b-41e5-9258-e4022ee76801">
		<ee:transform doc:name="mask payload secrets" doc:id="7849756e-81b0-44a5-a3ed-f63d8ecaf286">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output java
import * from dw::util::Values

fun removeAuth(obj) = 
    obj
        mask "Authorization" with "*****"
        mask "access_token" with "*****"
        mask "password" with "*****"
        mask "token" with "*****"
        mask "api_key" with "*****"
        mask "apikey" with "*****"
        mask "secret" with "*****"
        mask "client_secret" with "*****"
        mask "client_id" with "*****"
        mask "refresh_token" with "*****"
        mask "session_id" with "*****"
        mask "set-cookie" with "*****"
        mask "cookie" with "*****"
        mask "id_token" with "*****"
        mask "private_key" with "*****"
        mask "x-datahub-api-key" with "*****"
---
if (!(vars.requestParams is Object)) vars.requestParams else removeAuth(vars.requestParams)]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="mr-core-sanitize-filename" doc:id="b6a9f188-63a2-4cc4-8713-dcf26466b4c7">
		<set-variable value='#[vars.testDataFileName replace ":" with "-"]'
			doc:name="testDataFileName" doc:id="d5b9fca3-a021-4676-998a-d4defa5708f9"
			variableName="testDataFileName" />
	</sub-flow>
	<sub-flow name="mr-after-call-save-params" doc:id="9b5625db-4f25-4af9-99fc-4099a5ef7a50">
		<flow-ref doc:name="sanitize filename so it does not crash on windows"
			doc:id="8d898289-7dce-4970-aec4-10ae8fbabf79" name="mr-core-sanitize-filename" />
		<flow-ref doc:name="sanitize requestParams" doc:id="169e03af-81e1-4453-8b7f-e0093f6a6b53"
			name="mr-core-load-input" target="requestParams" />
		<validation:is-not-null doc:name="testDataFileName Is not null"
			doc:id="10a06dbd-60bd-428e-8e9a-d7d6adb9ff19" value="#[vars.testDataFileName]"
			message='#["Mandatory variable testDataFileName not set when calling " ++ flow.name]' />
		<choice doc:name="Choice" doc:id="ff1f7311-5a84-401c-b486-194f9bbbe62b">
			<when
				expression="#[// application/gzip&#10;output java --- attributes.headers.'content-encoding' == &quot;gzip&quot; or typeOf(vars.requestParams)~=&quot;application/gzip&quot;]">
				<compression:decompress doc:name="Decompress GZIP"
					doc:id="fc31191f-efb4-41f8-a179-f651272c5a6c">
					<compression:decompressor>
						<compression:gzip-decompressor />
					</compression:decompressor>
				</compression:decompress>
				<set-variable value='#["gzip"]' doc:name="compression = gzip"
					doc:id="e9ccb7d1-276c-46df-925c-4204ed1d0726" variableName="compression" />
			</when>
			<when
				expression="#[//zip&#10;output java --- attributes.headers.'content-encoding' == &quot;zip&quot;]">
				<compression:decompress doc:name="Decompress ZIP"
					doc:id="a7008030-b367-4431-8476-66851d3d5e6e">
					<compression:decompressor>
						<compression:zip-decompressor />
					</compression:decompressor>
				</compression:decompress>
				<set-variable value='#["zip"]' doc:name="compression = zip"
					doc:id="99f32552-6d30-4347-8e59-7cef56901bbd" variableName="compression" />
			</when>
			<otherwise>
				<set-variable value='#[null]' doc:name="compression = null"
					doc:id="54e48b3d-d30a-4a1f-a63f-e0a9cf52b6a1" variableName="compression" />
			</otherwise>
		</choice>
		<ee:transform doc:name="combine into testData" doc:id="706970b6-bed9-412a-85ba-4eaff5a32221">
			<ee:message />
			<ee:variables>
				<ee:set-variable variableName="testData"><![CDATA[%dw 2.0
output application/java
import * from dw::util::Values
fun removeAuth(obj) = 
    obj
        mask "Authorization" with "*****"
        mask "access_token" with "*****"
        mask "password" with "*****"
        mask "token" with "*****"
        mask "api_key" with "*****"
        mask "apikey" with "*****"
        mask "secret" with "*****"
        mask "client_secret" with "*****"
        mask "refresh_token" with "*****"
        mask "session_id" with "*****"
        mask "set-cookie" with "*****"
        mask "cookie" with "*****"
        mask "id_token" with "*****"
        mask "private_key" with "*****"
        mask "x-datahub-api-key" with "*****"

---
removeAuth({
	requestParams: vars.requestParams,
	response: {
		payload: payload,
		attributes: attributes,
		compression: vars.compression default null
	}
})]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<set-variable value='#[vars.testName ++ "/" ++ vars.testDataFileName ++ ".json"]'
			doc:name="filePath" doc:id="69fce205-3a4a-4787-a4c3-1edffb90d4e3"
			variableName="filePath" />
		<try doc:name="Try1" doc:id="b59c7c97-83a1-4cd0-9997-72dfb1bd564d">
			<file:read doc:name="Read" doc:id="48354f7c-8c5e-49fd-8e4f-31f1d0888c1e"
				path='#[vars.testName ++ "/" ++ vars.testDataFileName ++ ".json"]'
				config-ref="test_data" target="currentTestData" />
			<ee:transform doc:name="Transform Message" doc:id="f0622ce1-48d6-439e-93ef-ec3825a40c61">
				<ee:message>
					<ee:set-payload><![CDATA[// this DW sees if our new testData already exists in the pre-existing testData by comparing requestParams
// it either appends the new testData or overrides the previous copy
import firstWith from dw::core::Arrays
output json
var preExistingEntry = vars.currentTestData firstWith ($.requestParams == vars.testData.requestParams)
---
if (isEmpty(preExistingEntry)) vars.currentTestData << vars.testData else 
	vars.currentTestData map ((item) -> 
		if (item.requestParams == vars.testData.requestParams) vars.testData else item
	)]]></ee:set-payload>
				</ee:message>
				<ee:variables>
				</ee:variables>
			</ee:transform>
			<error-handler>
				<on-error-continue enableNotifications="true" logException="true"
					doc:name="On Error Continue" doc:id="805decca-2d20-464d-9de7-d7b832fe494d">
					<set-payload value="#[[vars.testData]]" doc:name="Set testData as Payload"
						doc:id="3f9e833a-a3c2-40e1-ba2e-461e60d51a19" />
				</on-error-continue>
			</error-handler>
		</try>
		<file:write doc:name="save testData" doc:id="b19dbfb9-cceb-420f-b6d7-c40be40602de"
			path="#[vars.filePath]" config-ref="test_data">
			<file:content><![CDATA[#[output json --- payload]]]></file:content>
		</file:write>
	</sub-flow>
	<sub-flow name="mr-validate-payload" doc:id="bf92caf2-59dc-45af-b64b-291dee4438b5">
		<set-variable
			value='#[output java --- readUrl("classpath://test_data/" ++ vars.testName ++ "/output.json", "application/json")]'
			doc:name="Set expectedPayload" doc:id="a6f3738f-e115-4046-a43f-19525c0c8e77"
			variableName="expectedPayload" />
		<choice doc:name="Choice" doc:id="6f273fd3-5ab6-475e-964a-bd2ceed1ae81">
			<when expression="#[output java --- vars.expectedPayload != payload]">
				<file:write doc:name="write actual output"
					doc:id="a1c61bb8-0d07-49e0-81b9-913e24a48b49" config-ref="test"
					path="output_actual.json">
					<file:content><![CDATA[#[output json --- payload]]]></file:content>
				</file:write>
			</when>
		</choice>
		<munit-tools:assert-equals doc:name="Assert expected payload"
			doc:id="91761830-51d9-4f59-a438-5399207ea8bd" actual="#[output java --- payload]"
			expected="#[output java --- vars.expectedPayload]" message="Unexpected payload!" />
	</sub-flow>
	<sub-flow name="mr-before-test" doc:id="4256d785-9e3d-45b3-b82f-47ee58b70a7b">
		<validation:is-not-null doc:name="vars.testName is not null"
			doc:id="77a8002c-00a2-44e0-9fd0-42307a433f77" value="#[vars.testName]"
			message="testName must not be null" />
		<file:read doc:name="Read input.json" doc:id="59b6cdc9-a087-4d9c-9121-867895b6c6a5"
			config-ref="test" path="input.json" target="testInput" />
		<ee:transform doc:name="set payload" doc:id="1b0fbaa8-0d89-4c21-9b7a-b82c50732dc9">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/java
---
vars.testInput.payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="set attributes" doc:id="ccdee43e-8bcc-43d9-8175-b43dfa3f31f5">
			<ee:message>
				<ee:set-attributes><![CDATA[%dw 2.0
output application/java
---
vars.testInput.attributes]]></ee:set-attributes>
			</ee:message>
		</ee:transform>
		<foreach doc:name="load all variables" doc:id="eb01e8bf-23e1-4c2c-953a-f5db21b026f0"
			collection="#[0 to sizeOf(vars.testInput.vars)]">
			<set-variable value="#[valuesOf(vars.testInput.vars)[vars.counter]]"
				doc:name="dynamically set variable" doc:id="1aca2663-8e82-47a7-b969-b9b8efaaca05"
				variableName="#[keysOf(vars.variables)[vars.counter]]" />
		</foreach>
	</sub-flow>
	<flow name="mr-record-output" doc:id="cc41f7a4-1c74-4918-be4e-d69d063bc183">
		<file:write doc:name="save testData" doc:id="4013715f-5736-4a0a-80ed-616d44bc9561"
			config-ref="test_data" path='#[vars.testName ++ "/output.json"]'>
			<file:content><![CDATA[#[output json --- payload]]]></file:content>
		</file:write>
	</flow>
</mule>